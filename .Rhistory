library(randomForest)
library(gbm)
train = read.csv("trainy_processed.csv")
train = train[, -1]
test = read.csv("test_processed.csv")
test = test[, -1]
library(randomForest)
library(gbm)
set.seed(1291)
train = read.csv("trainy_processed.csv")
train = train[, -1]
test = read.csv("test_processed.csv")
test = test[, -1]
library(randomForest)
library(gbm)
set.seed(1291)
train = read.csv("trainy_processed.csv")
train = train[, -1]
test = read.csv("test_processed.csv")
test = test[, -1]
setwd("C:/Users/Devansh/Box Sync/School/2016 - 2017 Junior/Spring/STAT 1291 - Statistics and Data Science/PredictingHousePrices/Code Snippets")
library(randomForest)
library(gbm)
set.seed(1291)
train = read.csv("../Data/trainy_processed.csv")
train = train[, -1]
test = read.csv("../Data/test_processed.csv")
test = test[, -1]
library(randomForest)
library(gbm)
set.seed(1291)
train = read.csv("../Data/trainy_processed.csv")
train = train[, -1]
test = read.csv("../Data/test_processed.csv")
test = test[, -1]
mtry_values = seq(25, 200, 25)
for (i in 1:8) {
rf = randomForest(train$y ~., data = train, mtry = 50, trees = 20000, importance = TRUE)
predRF = exp(predict(rf, test))
filename = paste("Prediction CSVs/RandomForestPredictions", toString(m_values[i]), sep = "")
write.csv(predRF, file = paste(filename, ".csv", sep = ""))
}
library(randomForest)
library(gbm)
set.seed(1291)
train = read.csv("../Data/trainy_processed.csv")
train = train[, -1]
test = read.csv("../Data/test_processed.csv")
test = test[, -1]
mtry_values = seq(25, 200, 25)
for (i in 1:8) {
rf = randomForest(train$y ~., data = train, mtry = 50, trees = 20000, importance = TRUE)
predRF = exp(predict(rf, test))
filename = paste("Prediction CSVs/RandomForestPredictions", toString(mtry_values[i]), sep = "")
write.csv(predRF, file = paste(filename, ".csv", sep = ""))
}
test
library(randomForest)
library(gbm)
set.seed(1291)
train = read.csv("../Data/trainy_processed.csv")
train = train[, -1]
test = read.csv("../Data/test_processed.csv")
test = test[, -1]
bag = randomForest(train$y ~., data = train, mtry = 212, trees = 20000, importance = TRUE)
predBag = exp(predict(bag, test))
write.csv(predBag, file = "Prediction CSVs/BaggingPredictions.csv")
library(randomForest)
library(gbm)
set.seed(1291)
train = read.csv("../Data/trainy_processed.csv")
train = train[, -1]
test = read.csv("../Data/test_processed.csv")
test = test[, -1]
bag = randomForest(train$y ~., data = train, mtry = 212, trees = 5000, importance = TRUE)
predBag = exp(predict(bag, test))
write.csv(predBag, file = "Prediction CSVs/BaggingPredictions.csv")
library(ggplot2)
kaggle_scores = c(0.14247, 0.14302, 0.14197, 0.14214, 0.14218, 0.14195, 0.14275, 0.14219)
qplot(mtry_values, kaggle_scores, main = "Random Forest Model - Kaggle Scores vs Mtry Parameter", ylab = "Kaggle Score (RMSE)", xlab = "Mtry Value")
pdf("Random Forest Kaggle Score Plot.pdf")
qplot(mtry_values, kaggle_scores, main = "Random Forest Model - Kaggle Scores vs Mtry Parameter", ylab = "Kaggle Score (RMSE)", xlab = "Mtry Value")
dev.off()
pdf("Random Forest Kaggle Score Plot.pdf")
qplot(mtry_values, kaggle_scores, main = "Random Forest Model - Kaggle Scores vs Mtry Parameter", ylab = "Kaggle Score (RMSE)", xlab = "Mtry Parameter")
dev.off()
qplot(mtry_values, kaggle_scores, main = "Random Forest Model - Kaggle Scores vs Mtry Parameter", ylab = "Kaggle Score (RMSE)", xlab = "Mtry Parameter")
library(randomForest)
library(gbm)
library(ggplot2)
set.seed(1291)
train = read.csv("../Data/trainy_processed.csv")
train = train[, -1]
test = read.csv("../Data/test_processed.csv")
test = test[, -1]
bag = randomForest(train$y ~., data = train, mtry = 212, trees = 20000, importance = TRUE)
predBag = exp(predict(bag, test))
write.csv(predBag, file = "Prediction CSVs/BaggingPredictions.csv")
rm(list = ls())
train = read.csv("Data/trainy_processed.csv")
setwd("C:/Users/Devansh/Box Sync/School/2016 - 2017 Junior/Spring/STAT 1291 - Statistics and Data Science/PredictingHousePrices")
train = read.csv("Data/trainy_processed.csv")
library(pls)
pls.fit=plsr(y~., data = train, validation = "CV", scale = TRUE, ncomp = 20)
pls.fit=plsr(train$y ~., data = train, validation = "CV", ncomp = 20)
